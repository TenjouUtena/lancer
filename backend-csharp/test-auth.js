// Test script to check JWT token generation and validation
const jwt = require('jsonwebtoken');

const JWT_SECRET = 'your-super-secret-key-that-should-be-at-least-32-characters-long-and-secure';
const ISSUER = 'LancerApi';
const AUDIENCE = 'LancerApp';

// Sample payload like the one generated by the backend
const payload = {
  'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier': 'test-user-id',
  'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'test@example.com',
  'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'test@example.com',
  'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname': 'Test',
  'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname': 'User',
  'GoogleId': 'google-test-id',
  'jti': 'unique-id',
  'iat': Math.floor(Date.now() / 1000),
  'exp': Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours
  'iss': ISSUER,
  'aud': AUDIENCE
};

// Generate token
const token = jwt.sign(payload, JWT_SECRET, { algorithm: 'HS256' });
console.log('Generated Token:', token);

// Verify token
try {
  const decoded = jwt.verify(token, JWT_SECRET, {
    issuer: ISSUER,
    audience: AUDIENCE,
    algorithms: ['HS256']
  });
  console.log('Decoded payload:', decoded);
  console.log('Token is valid!');
} catch (error) {
  console.error('Token validation failed:', error.message);
}