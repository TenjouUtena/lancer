# Docker Compose for production deployment
version: '3.8'

services:
  # .NET API
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: final
    container_name: lancer-api-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${DATABASE_CONNECTION_STRING}
      - AWS__Region=${AWS_REGION}
      - AWS__S3BucketName=${S3_BUCKET_NAME}
      - CORS__AllowedOrigins=${FRONTEND_URL}
    ports:
      - "8080:8080"
    networks:
      - lancer-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/swagger"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Next.js Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
      target: runner
      args:
        NEXT_PUBLIC_API_URL: ${API_URL}
    container_name: lancer-frontend-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - lancer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lancer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    networks:
      - lancer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
  postgres:
    image: postgres:15-alpine
    container_name: lancer-postgres
    environment:
      POSTGRES_DB: lancer
      POSTGRES_USER: lanceruser
      POSTGRES_PASSWORD: 7oS400QX758uo0Js
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - lancer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lanceruser -d lancer"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  lancer-network:
    driver: bridge